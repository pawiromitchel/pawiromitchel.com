{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Hey , I'm Mitchel Pawirodinomo, a Software Engineer from Suriname. I've been coding since 2014, participated in many Hackathons and Coding challenges. I love challenging myself so the transition from trad web2 tech to web3 has been a blast so far!</p> <p>My socials are in the footer so feel free to reach out and have a coffee with me if you wanna pick my brain.</p>"},{"location":"#tech","title":"tech()","text":"<ul> <li>2021-2024: Golang  |  Typescript |  Web3</li> <li>2017-2021:  Angular |  NodeJS</li> <li>2014-2017:  PHP |  JS |  Wordpress</li> </ul>"},{"location":"#machine","title":"machine()","text":"<pre><code> \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     trustm3@trustm3\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     OS: Manjaro 24.0.1 Wynsdey\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     Kernel: x86_64 Linux 6.9.2-1-MANJARO\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     Uptime: 12h 27m\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588            \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     Packages: 1277\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     Shell: zsh 5.9\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     Resolution: 1920x1080\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     DE: KDE\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     WM: KWin\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     GTK Theme: Breeze-Dark [GTK2], Breeze [GTK3]\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     Icon Theme: breeze\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     Disk: 313G / 920G (36%)\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     CPU: 13th Gen Intel Core i5-13420H @ 12x 4.6GHz [45.0\u00b0C]\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     GPU: NVIDIA GeForce RTX 3050 6GB Laptop GPU\n                                  RAM: 5901MiB / 31822MiB\n</code></pre>"},{"location":"#software","title":"software()","text":"<ul> <li>VSCodium, VSCode without the spyware<ul> <li>Continue, AI Assistant with Ollama. Wrote a article about setting it up here</li> <li>Thunder Client, lightweight REST API Client</li> </ul> </li> <li>DBeaver Database Tool, all-in-one DB tool</li> <li>Brave Browser, auto block adds, cookie tracking, Tor support<ul> <li>Dark Reader, DarkMode every website</li> <li>Bitwarden, Password Manager that doesn't suck</li> </ul> </li> <li>Transmission, lightweight Bittorrent Client</li> </ul>"},{"location":"ai/local-ai-with-ollama/","title":"Ollama","text":"<p>Ollama  is a way of running large language model locally, it's like running ChatGPT on your own machine. Of course, this means that the answers are generated on your machine, so you'll need a beefy one.</p> <p>My <code>screenfetch</code> output: <pre><code> \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     trustm3@trustm3\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     OS: Manjaro 24.0.1 Wynsdey\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     Kernel: x86_64 Linux 6.9.2-1-MANJARO\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     Uptime: 8h 8m\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588            \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     Packages: 1277\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     Shell: zsh 5.9\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     Resolution: 1920x1080\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     DE: KDE\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     WM: KWin\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     GTK Theme: Breeze-Dark [GTK2], Breeze [GTK3]\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     Icon Theme: breeze\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     Disk: 280G / 920G (32%)\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     CPU: 13th Gen Intel Core i5-13420H @ 12x 4.6GHz [42.0\u00b0C]\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     GPU: NVIDIA GeForce RTX 3050 6GB Laptop GPU\n                                  RAM: 3954MiB / 31822MiB\n</code></pre></p> <p>An example output of running Ollama </p>"},{"location":"ai/local-ai-with-ollama/#installation","title":"Installation","text":"<p>Go to the download page of Ollama and choose your operating system. Then, follow the instructions for installation.</p> <ul> <li> macOS</li> <li> windows</li> <li> linux: <code>curl -fsSL https://ollama.com/install.sh | sh</code></li> </ul>"},{"location":"ai/local-ai-with-ollama/#usage","title":"Usage","text":"<p>After the installation, you should be able to use it immidiately. You can find all available models here</p> <p>We'll be using Llama 3 in this example run <code>ollama pull llama3</code> You should be seeing something like this <pre><code>ollama pull llama3\npulling manifest \npulling 6a0746a1ec1a... 100% \u2595\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f 4.7 GB                         \npulling 4fa551d4f938... 100% \u2595\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  12 KB                         \npulling 8ab4849b038c... 100% \u2595\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  254 B                         \npulling 577073ffcc6c... 100% \u2595\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  110 B                         \npulling 3f8eb4da87fa... 100% \u2595\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  485 B                         \nverifying sha256 digest \nwriting manifest \nremoving any unused layers \nsuccess \n</code></pre></p> <p>Now you can run the <code>llama3</code> model <code>ollama run llama3</code> and ask it whatever you want </p>"},{"location":"ai/local-ai-with-ollama/#next-steps","title":"Next steps","text":"<p>With this running, possibilities are endless \ud83d\ude80 </p>"},{"location":"ai/local-ai-with-ollama/#rest-api","title":"REST API","text":"<p>https://github.com/ollama/ollama/blob/main/docs/api.md <pre><code>curl -X POST http://localhost:11434/api/generate -d '{\n  \"model\": \"llama3\",\n  \"prompt\":\"Why is the sky blue?\"\n }'\n</code></pre></p>"},{"location":"ai/local-ai-with-ollama/#github-copilot-alternative","title":"Github Copilot alternative","text":"<p>There's this VSCode extension that you can configure to use Ollama to become your Github Copilot replacement called Continue</p> <p>After installing it you should be seeing a new icon in your sidebar to ask questions related to your code (give it time to index) </p>"},{"location":"ai/local-ai-with-ollama/#chatgpt-ui","title":"ChatGPT UI","text":"<p>You can run your own WebUI that has Retrieval Augmented Generation (RAG) support and more.</p>"},{"location":"ai/local-ai-with-ollama/#sdks","title":"SDK's","text":"<p>There are SDKs available if you want to integrate the models into your existing apps </p>"},{"location":"ai/local-ai-with-ollama/#conclusion","title":"Conclusion","text":"<p>It's so easy to run a complex AI model locally nowaways, have a look into Huggingface as well. </p>"},{"location":"coding/create-telegram-bots/","title":"Telegram Bots with Node.js","text":"<p>Telegram has been my go to chat platform for a couple of years now. I've been able to automate A LOT of things with it such as</p> <ul> <li>Taking trades on FTX</li> <li>Doing DCA (Dollar Cost Average) on different assets</li> </ul>"},{"location":"coding/create-telegram-bots/#what-are-we-going-to-build","title":"What are we going to build?","text":"<p>We'll build two things during this project</p> <ol> <li>A Telegram bot that takes an input, runs a function and returns the output</li> <li>Connect our app to a Web3 RPC Node, in this cause we'll use Quicknode so please go ahead and make an account on Quicknode.io</li> </ol> <p></p>"},{"location":"coding/create-telegram-bots/#project-setup","title":"Project setup","text":"<ol> <li>Please follow this guide to set up a Node.js project.</li> <li>Setup a free Quicknode endpoint and choose ETH Mainnet</li> </ol> <p>insert screenshot here</p>"},{"location":"coding/create-telegram-bots/#create-a-bot-via-botfather","title":"Create a bot via BotFather","text":"<p>BotFather is the official way of creating bots on Telegram. </p> <ol> <li>start the bot by chatting with BotFather</li> <li>execute <code>/newbot</code> to create a new bot</li> <li>give the bot a username and a name</li> <li>(optional) you can set a description and a profile picture</li> </ol> <p>After you've followed this proces, you should get this text from him. </p>"},{"location":"coding/create-telegram-bots/#project-setup_1","title":"Project setup","text":"<p>I'm assuming you've followed this guide to setup your Node.js environment. I'll call my project <code>telegram-bot-example</code>. <pre><code>mkdir telegram-bot-example\ncd telegram-bot-example\ngit init\nnpm init -y\necho \"node_modules/\" &gt; .gitignore\n</code></pre></p> <p>We'll now install the dependencies</p> <ol> <li><code>node-telegram-bot-api</code> for the Telegram bot</li> <li><code>dotenv</code> for the environment variables</li> <li><code>web3</code> for connecting to the Web3 RPC Node we now have thanks to Quicknode</li> </ol> <pre><code>npm i node-telegram-bot-api dotenv web3\n</code></pre> <p>Defining the environment variables</p> <ol> <li>Create a file called <code>.env</code> <p>for the CLI lovers <pre><code>touch .env\n</code></pre></p> </li> <li>Copy the following content into it <pre><code>TELEGRAM_TOKEN=&lt;INSERT_YOUR_TOKEN_HERE&gt;\nWEB3_PROVIDER_URL=&lt;INSERT_YOUR_WEB3_PROVIDER_URL_HERE&gt;\n</code></pre> Copy and paste the URL from Quicknode and paste it in <code>WEB3_PROVIDER_URL</code> </li> </ol>"},{"location":"coding/create-telegram-bots/#part-1-create-the-telegram-bot","title":"Part 1: Create the Telegram bot","text":"<ol> <li>Create a file called <code>app.js</code></li> <li>Add the following code. This is the core of our bot. app.js<pre><code>const TelegramBot = require('node-telegram-bot-api');\nrequire('dotenv').config();\n\nconst bot = new TelegramBot(process.env.TELEGRAM_TOKEN, { polling: true });\nbot.on(\"polling_error\", (msg) =&gt; console.log(msg));\nbot.on('message', async (msg) =&gt; {\n    const chatId = msg.chat.id;\n    let text = msg.text ? msg.text : '';\n\n    bot.sendMessage(chatId, 'hey there! this is what you asked me ' + text);\n});\n</code></pre> <p>We don't need to pass the TELEGRAM_TOKEN as a string anymore because it's been defined in the .env file. #lifehacks lol</p> </li> <li>Run the bot <pre><code>node app.js\n</code></pre> </li> </ol>"},{"location":"coding/create-telegram-bots/#part-2-connect-to-the-web3-rpc-node","title":"Part 2: Connect to the Web3 RPC Node","text":"<ol> <li>Create a file called <code>web3.js</code></li> <li>Add the following code, we're doing a simple <code>getBlock</code> call web3.js<pre><code>const Web3 = require(\"web3\");\nrequire('dotenv').config();\n\nasync function getBlock() {\n    const url = process.env.WEB3_PROVIDER_URL;\n    const web3 = new Web3(url);\n    const block = await web3.eth.getBlock(\"latest\");\n    return await block;\n}\n\n// getBlock().then(console.log)\n\nmodule.exports = { getBlock };\n</code></pre> <p>See? Connecting to Web3 is not that hard anymore. </p> </li> <li>Uncomment the line <code>getBlock().then(console.log)</code> to test the file independently <pre><code>node web3.js\n</code></pre> You should get an output like this <pre><code>{\n  baseFeePerGas: 12011862285,\n  difficulty: '12152901669249817',\n  extraData: '0x466c6578706f6f6c2f53312f4252202d204c6973626f6e',\n  gasLimit: 30000000,\n  gasUsed: 9195298,\n  hash: '0xbf04f30cb73aed0583999108603616027c2b4ab500daa0f33a1052d353b869f7',\n  ...\n}\n</code></pre> <p>This is the data within the latest mined block</p> </li> </ol>"},{"location":"coding/create-telegram-bots/#part-3-custom-telegram-commands","title":"Part 3: Custom Telegram commands","text":"<p>Let's extend our bot with a custom <code>/getLatestBlock</code> command app.js<pre><code>const TelegramBot = require('node-telegram-bot-api');\nrequire('dotenv').config();\n\nconst bot = new TelegramBot(process.env.TELEGRAM_TOKEN, { polling: true });\nbot.on(\"polling_error\", (msg) =&gt; console.log(msg));\nbot.on('message', async (msg) =&gt; {\n    const chatId = msg.chat.id;\n    let text = msg.text ? msg.text : '';\n\n    if (text.includes('/getLatestBlock')) {\n        bot.sendMessage(chatId, 'getting latest block...');\n    }\n});\n</code></pre></p> <p>The following block will wait for the user to call the command <code>/getLatestBlock</code> <pre><code>if (text.includes('/getLatestBlock')) {\n    bot.sendMessage(chatId, 'getting latest block...');\n}\n</code></pre></p> <p></p>"},{"location":"coding/create-telegram-bots/#part-4-connect-the-bot-to-the-web3-rpc-node","title":"Part 4: Connect the bot to the Web3 RPC Node","text":"<p>First we need to add the module we made earlier to the <code>app.js</code> file <pre><code>const web3 = require('./web3');\n</code></pre></p> <p>Now we slightly modify the code to return blockhash when the user calls the command <code>/getLatestBlock</code> <pre><code>if (text.includes('/getLatestBlock')) {\n    bot.sendMessage(chatId, 'getting latest block...');\n    const block = await web3.getBlock();\n    bot.sendMessage(chatId, 'Latest blockhash: ' + block.hash);\n}\n</code></pre></p> <p>The full code should look like this .env<pre><code>TELEGRAM_TOKEN=\nWEB3_PROVIDER_URL=\n</code></pre></p> app.js<pre><code>const TelegramBot = require('node-telegram-bot-api');\nconst web3 = require('./web3');\nrequire('dotenv').config();\n\nconst bot = new TelegramBot(process.env.TELEGRAM_TOKEN, { polling: true });\nbot.on(\"polling_error\", (msg) =&gt; console.log(msg));\nbot.on('message', async (msg) =&gt; {\n    const chatId = msg.chat.id;\n    let text = msg.text ? msg.text : '';\n\n    if (text.includes('/getLatestBlock')) {\n        const block = await web3.getBlock();\n        bot.sendMessage(chatId, 'Latest blockhash: ' + block.hash);\n    }\n});\n</code></pre> web3.js<pre><code>const Web3 = require(\"web3\");\nrequire('dotenv').config();\n\nasync function getBlock() {\n    const url = process.env.WEB3_PROVIDER_URL;\n    const web3 = new Web3(url);\n    const block = await web3.eth.getBlock(\"latest\");\n    return await block;\n}\n\nmodule.exports = { getBlock };\n</code></pre> <p>You can view the full project code here</p>"},{"location":"coding/create-telegram-bots/#conclusion","title":"Conclusion","text":"<p>What have we learned?</p> <ol> <li>Create a simple Telegram bot</li> <li>Register and create a account at Quicknode</li> <li>Connect the bot to the Web3 RPC Node</li> <li>Custom Telegram commands <code>/getLatestBlock</code></li> <li>Environment variables such as <code>TELEGRAM_TOKEN</code> and <code>WEB3_PROVIDER_URL</code></li> <li>Export functions to be used in other files, like how the function <code>getBlock()</code> in <code>web3.js</code> was used in <code>app.js</code> <pre><code>module.exports = { getBlock };\n</code></pre></li> </ol>"},{"location":"coding/create-telegram-bots/#next-steps","title":"Next steps?","text":"<p>That's for you to find out </p> <ol> <li>Learn how to reister the custom commands via BotFather</li> <li>Create more custom commands and play around with the possibilities of Web3 <p>Maybe getting the ETH balance of a wallet? Hmmmm .... </p> </li> </ol> <p>Thanks for reading! </p>"},{"location":"coding/nodejs-proj-setup/","title":"Setting up a Node.js project","text":"<p>I won't be covering the theory behind this so please visit their website to learn more about Node.js </p>"},{"location":"coding/nodejs-proj-setup/#installing-nodejs","title":"Installing Node.js","text":"<p>Navigate to Node.js, download and install it. I personally use a Version Manager called NVM, this gives me the flexibility to use multiple versions of Node.js.</p>"},{"location":"coding/nodejs-proj-setup/#project-setup","title":"Project setup","text":"<p><code>project-name-here</code> is the name of your project. <pre><code>project=project-name-here\nmkdir $project &amp;&amp; cd $project\n</code></pre></p> <p>Run the following command to inittialize <code>npm</code> <pre><code>npm init -y\n</code></pre></p>"},{"location":"coding/nodejs-proj-setup/#git-setup","title":"Git setup","text":"<p>This is an optional step, but it is recommended ... I mean, who doesn't want to use Git? </p> <p>Add the folder to a local <code>git</code> repo <pre><code>git init\n</code></pre></p> <p>Create a file called <code>.gitignore</code> and add the following line <pre><code>node_modules/\n</code></pre></p> <p>This prevents the <code>node_modules</code> folder from being committed to the repo.</p> <p>Whooo!  You're done setting up a Node.js project, please continue with the guide ... </p>"},{"location":"coding/scraping-websites-with-puppeteer/","title":"Scraping with Puppeteer","text":"<p>Not going into the details of explaining what Puppeteer is, go read that on their website. We just want to code  </p>"},{"location":"coding/scraping-websites-with-puppeteer/#what-can-puppeteer-do","title":"What can Puppeteer do","text":"<p>Puppeteer can do lots of things, but the most used ones are:</p> <ul> <li>automate form filling and submissions</li> <li>crawl a website and extract data from it</li> <li>take screenshots of a website, page and even sections</li> </ul>"},{"location":"coding/scraping-websites-with-puppeteer/#what-well-be-building","title":"What we'll be building","text":"<p>A MVP of a simple scraper that can scrape a website and return the data in a JSON format.</p>"},{"location":"coding/scraping-websites-with-puppeteer/#requirements","title":"Requirements","text":"<ol> <li>Node.js; You can install this the traditional way by downloading and installing it, or you can use NVM to manage multiple versions of Node.js.</li> <li>VSCode or any other text editor</li> </ol>"},{"location":"coding/scraping-websites-with-puppeteer/#project-setup","title":"Project setup","text":"<p>Please follow this guide to set up a Node.js project.</p> <p>Install <code>puppeteer</code> <pre><code>npm install puppeteer\n</code></pre></p> <p>Open the project with VSCode. If you don't have the <code>code</code> available on your PATH, please follow this guide </p> <pre><code>code .\n</code></pre>"},{"location":"coding/scraping-websites-with-puppeteer/#lets-code","title":"Let's code","text":"<p>Alright, we're done setting up the project. Let's start coding! We'll use a local news website called Starnieuws as our example.</p>"},{"location":"coding/scraping-websites-with-puppeteer/#basics","title":"Basics","text":"<p>Basic usage of the <code>puppeteer</code> package <pre><code>const puppeteer = require('puppeteer');\nconst url = 'https://www.starnieuws.com/';\n\n// this is a async function that calls itself, no need to call it manually\n(async () =&gt; {\n    // launch a Chromium browser, set the headless property to true if you're deploying to production\n    browser = await puppeteer.launch({\n        headless: false,\n    });\n\n    // create new page object\n    const page = await browser.newPage();\n\n    // set viewport width and height\n    await page.setViewport({\n        width: 1920,\n        height: 1080,\n    });\n\n    // nagivate to the url\n    await page.goto(url);\n})();\n</code></pre></p> <p>Run it with <code>node &lt;filename&gt;.js</code> via your VSCode Terminal. Voila, a browser should open and you should be able to see the website.</p>"},{"location":"coding/scraping-websites-with-puppeteer/#catch-errors-try-catch","title":"Catch errors (try catch)","text":"<p>We'll add a <code>try catch</code> block to catch any errors that might occur within the <code>async</code> function <pre><code>let browser = null;\n\ntry {\n    // launch headless Chromium browser\n    browser = await puppeteer.launch({\n        headless: false,\n    });\n\n    // create new page object\n    const page = await browser.newPage();\n\n    // set viewport width and height\n    await page.setViewport({\n        width: 1920,\n        height: 1080,\n    });\n\n    await page.goto(url);\n\n    // do something with the page ...\n\n} catch (err) {\n    console.log(`Error: ${err.message}`);\n} finally {\n    if (browser) {\n        await browser.close();\n    }\n    console.log(`\\nScraping ${url} done!`);\n}\n</code></pre></p>"},{"location":"coding/scraping-websites-with-puppeteer/#scraping","title":"Scraping","text":"<p>Let's scrape something now. We want the title of the news article and the URL. Looking at the source code, we can see that it's in this order <code>.headlines_content &gt; ul &gt; li</code>. The list sits under the <code>.headlines_content</code> class.</p> <p>Scraping contents looks like this in <code>puppeteer</code>, read more about <code>evaluate()</code> here</p> <p>The element looks like this <code>&lt;a href=\"https://www.starnieuws.com/index.php/welcome/index/nieuwsitem/71066\"&gt;LVV: Stijgend waterpeil Nannizwamp wordt gemonitord&lt;/a&gt;</code> so we want the <code>href</code> attribute, and the text content. Add this function under the <code>await page.goto(url);</code> code block </p> <pre><code>let data = await page.evaluate(() =&gt; {\n    let results = [];\n    let items = document.querySelectorAll('.headlines_content &gt; ul &gt; li');\n\n    // iterate through the items and push the data to the results array\n    items.forEach((item) =&gt; {\n        results.push({\n            title: item.querySelector('a').innerText,\n            url: item.querySelector('a').href,\n        })\n    })\n\n    return results\n})\n\n// do something with the scraped data\nconsole.log(data)\n</code></pre>"},{"location":"coding/scraping-websites-with-puppeteer/#complete-source-code","title":"Complete source code","text":"<p>Your complete code should look like this</p> app.js<pre><code>const puppeteer = require('puppeteer');\nconst url = 'https://www.starnieuws.com/';\n\n(async () =&gt; {\n    let browser = null;\n\n    try {\n        // launch headless Chromium browser\n        browser = await puppeteer.launch({\n            headless: false,\n        });\n\n        // create new page object\n        const page = await browser.newPage();\n\n        // set viewport width and height\n        await page.setViewport({\n            width: 1920,\n            height: 1080,\n        });\n\n        await page.goto(url);\n\n        let data = await page.evaluate(() =&gt; {\n            let results = []\n            let items = document.querySelectorAll('.headlines_content &gt; ul &gt; li')\n            items.forEach((item) =&gt; {\n                results.push({\n                    title: item.querySelector('a').innerText,\n                    url: item.querySelector('a').href,\n                })\n            })\n            return results\n        })\n\n        // do something with the scraped data\n        console.log(data)\n\n    } catch (err) {\n        console.log(`Error: ${err.message}`);\n    } finally {\n        if (browser) {\n            await browser.close();\n        }\n        console.log(`\\nScraping ${url} done!`);\n    }\n})();\n</code></pre> <p>Run it! <code>node app.js</code> and you should see something like this </p>"},{"location":"coding/scraping-websites-with-puppeteer/#storing-your-results","title":"Storing your results","text":"<ol> <li>As a file. We can achieve this by storing the output to a file with the <code>fs</code> module. Read more about it here</li> <li>In a Database (DB), you can use MongoDB, MySQL, PostgreSQL, etc.</li> </ol>"},{"location":"coding/scraping-websites-with-puppeteer/#wrapping-up","title":"Wrapping up","text":"<p>So, what have we learned?</p> <ul> <li>Setting up a <code>git</code> repo and initializing <code>npm</code></li> <li>Getting started with Puppeteer</li> <li>Catching errors with <code>try catch</code> blocks</li> <li>Scraping data</li> </ul> <p>Thank you so much for reading and following along, see you soon </p>"},{"location":"general/getting-a-remote-job/","title":"Scoring a remote job","text":"<p>Working from home has become the standard for most developers so getting a remote job is crucial. Nobody likes working in an office anymore lol. There are so many places where you can sign up, create a profile and start searching for gigs or applying for jobs.</p> <p>Before applying to jobs, please put some work into your online profile and CV. </p> <ol> <li>Keep your LinkedIn profile up to date, you can use my profile as reference if you want</li> <li>Use a Resume builder like this one to get a nice looking CV</li> </ol>"},{"location":"general/getting-a-remote-job/#general-job-searching","title":"General job searching","text":"<ol> <li>UpWork</li> <li>Angel.co</li> <li>Fiverr</li> <li>Linkedin</li> <li>Stackoverflow</li> <li>Indeed</li> </ol>"},{"location":"general/getting-a-remote-job/#web3-specific","title":"Web3 Specific","text":"<p>This is a great place to start for anyone transitioning from the web2 space to web3. There are technical and non-technical jobs, and you can apply for them.</p> <ol> <li>Anthony Pompliano job board</li> <li>Cryptocurrencyjobs</li> <li>Buildspace</li> <li>Bankless</li> <li>Startup</li> </ol> <p>Even if you're not conifdent enough, read through the requirements and learn the basics. There are so many free resources to help you learn.</p> <p>Just do it. Whatever happens, happens.</p>"},{"location":"general/getting-a-remote-job/#preparing-for-interviews","title":"Preparing for interviews","text":"<p>Preparation for interviews is critical for anyone who wants to get a job. Many resources and tools are available to help you prepare for interviews. Most of the time, interviews are split into parts.</p> <p>This Youtube Channel really helped to get a nice overview of how these remote interviews are </p>"},{"location":"general/getting-a-remote-job/#introduction","title":"Introduction","text":"<p>There's a link that has helped me ace the introduction to interviews. Ultimate List of Interview Questions</p> <p>Write down your achievements, skills, and projects in bullet points. The recruiter expects you to be quick and concise.</p>"},{"location":"general/getting-a-remote-job/#technical-written-and-verbal","title":"Technical (Written and verbal)","text":"<p>For technical interviews, it's best to know and practice similar questions beforehand. Get to know the company's tech stack, environment, and position in the market.</p> <ul> <li>Practice code challenges</li> <li>Tips and Tricks</li> </ul>"},{"location":"general/getting-a-remote-job/#final-interview","title":"Final interview","text":"<p>The recruiter will give you a summary of their thoughts and your experience throughout the process. During the discussion, you'll get a feeling if you're in or not. </p> <p>They'll also ask you for a desired salary, so keep this in mind. Research what the average pay is for the position you're applying for. Average pay of a Software Engineer</p>"},{"location":"general/getting-a-remote-job/#getting-paid","title":"Getting paid","text":"<p>How will you get the money? Excellent question  I use these platforms:</p> <ul> <li>Payoneer</li> <li>Wise, formerly TransferWise</li> </ul> <p>I might do a seperate guide for this topic, so stay tuned.</p> <p>Thank you very much </p>"}]}